using System;
using System.Collections.Generic;
using System.Globalization;

namespace CurrencyConverter
{
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–µ
    public struct Currency
    {
        public string Code { get; }
        public string Name { get; }
        public string Symbol { get; }
        public double RateToUSD { get; }

        public Currency(string code, string name, string symbol, double rateToUSD)
        {
            Code = code;
            Name = name;
            Symbol = symbol;
            RateToUSD = rateToUSD;
        }

        public override string ToString()
        {
            return $"{Code} - {Name} ({Symbol})";
        }
    }

    public class CurrencyConverter
    {
        private Dictionary<string, Currency> currencies;

        public CurrencyConverter()
        {
            InitializeCurrencies();
        }

        private void InitializeCurrencies()
        {
            currencies = new Dictionary<string, Currency>
            {
                ["USD"] = new Currency("USD", "–î–æ–ª–ª–∞—Ä –°–®–ê", "$", 1.0),
                ["EUR"] = new Currency("EUR", "–ï–≤—Ä–æ", "‚Ç¨", 0.85),
                ["RUB"] = new Currency("RUB", "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å", "‚ÇΩ", 75.0),
                ["GBP"] = new Currency("GBP", "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç", "¬£", 0.73),
                ["JPY"] = new Currency("JPY", "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞", "¬•", 110.0),
                ["CNY"] = new Currency("CNY", "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", "¬•", 6.45),
                ["KZT"] = new Currency("KZT", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ", "‚Ç∏", 425.0),
                ["UAH"] = new Currency("UAH", "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞", "‚Ç¥", 27.0),
                ["BYN"] = new Currency("BYN", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å", "Br", 2.5),
                ["CAD"] = new Currency("CAD", "–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä", "C$", 1.25)
            };
        }

        public void Run()
        {
            Console.WriteLine("=== üí± –ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢ ===");
            Console.WriteLine("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç!");
            Console.WriteLine();

            int choice;
            do
            {
                ShowMenu();
                choice = GetMenuChoice();

                switch (choice)
                {
                    case 1:
                        ConvertCurrency();
                        break;
                    case 2:
                        ShowAllCurrencies();
                        break;
                    case 3:
                        ShowExchangeRates();
                        break;
                    case 4:
                        QuickConvert();
                        break;
                    case 5:
                        Console.WriteLine("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã");
                        break;
                    default:
                        Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                        break;
                }

                if (choice != 5)
                {
                    Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                    Console.ReadKey();
                    Console.Clear();
                }

            } while (choice != 5);
        }

        private void ShowMenu()
        {
            Console.WriteLine("--- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---");
            Console.WriteLine("1. üí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É");
            Console.WriteLine("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–ª—é—Ç—ã");
            Console.WriteLine("3. üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç");
            Console.WriteLine("4. ‚ö° –ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä");
            Console.WriteLine("5. üö™ –í—ã—Ö–æ–¥");
            Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ");
        }

        private int GetMenuChoice()
        {
            string input = Console.ReadLine();
            if (int.TryParse(input, out int choice))
            {
                return choice;
            }
            return -1;
        }

        private void ConvertCurrency()
        {
            Console.Clear();
            Console.WriteLine("=== üí± –ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢ ===\n");

            // –í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
            string fromCurrency = SelectCurrency("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:");
            if (string.IsNullOrEmpty(fromCurrency)) return;

            // –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
            string toCurrency = SelectCurrency("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:");
            if (string.IsNullOrEmpty(toCurrency)) return;

            // –í–≤–æ–¥ —Å—É–º–º—ã
            double amount = GetAmount($"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currencies[fromCurrency].Name}:");
            if (amount < 0) return;

            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            double result = Convert(amount, fromCurrency, toCurrency);

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            ShowConversionResult(amount, fromCurrency, result, toCurrency);
        }

        private string SelectCurrency(string prompt)
        {
            Console.WriteLine($"\n{prompt}");
            ShowCurrencyList();
            Console.Write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã: ");
            
            string input = Console.ReadLine()?.ToUpper();
            
            if (string.IsNullOrEmpty(input) || !currencies.ContainsKey(input))
            {
                Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã!");
                return string.Empty;
            }
            
            return input;
        }

        private void ShowCurrencyList()
        {
            Console.WriteLine("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:");
            foreach (var currency in currencies.Values)
            {
                Console.WriteLine($"  {currency}");
            }
        }

        private double GetAmount(string prompt)
        {
            Console.WriteLine($"\n{prompt}");
            Console.Write("–°—É–º–º–∞: ");
            
            string input = Console.ReadLine();
            
            // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Ç–æ—á–∫—É, —Ç–∞–∫ –∏ –∑–∞–ø—è—Ç—É—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            input = input?.Replace(',', '.');
            
            if (double.TryParse(input, NumberStyles.Float, CultureInfo.InvariantCulture, out double amount) && amount >= 0)
            {
                return amount;
            }
            
            Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!");
            return -1;
        }

        private double Convert(double amount, string fromCurrency, string toCurrency)
        {
            if (fromCurrency == toCurrency)
            {
                return amount;
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD, –∑–∞—Ç–µ–º –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
            double amountInUSD = amount / currencies[fromCurrency].RateToUSD;
            double result = amountInUSD * currencies[toCurrency].RateToUSD;
            
            return Math.Round(result, 2);
        }

        private void ShowConversionResult(double amount, string fromCurrency, double result, string toCurrency)
        {
            var fromCurr = currencies[fromCurrency];
            var toCurr = currencies[toCurrency];

            Console.WriteLine("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò ===");
            Console.WriteLine($"üí∞ {amount:F2} {fromCurr.Symbol} ({fromCurr.Name})");
            Console.WriteLine("   ‚¨áÔ∏è");
            Console.WriteLine($"üí± {result:F2} {toCurr.Symbol} ({toCurr.Name})");
            Console.WriteLine();

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            double rate = result / amount;
            Console.WriteLine($"üìä –ö—É—Ä—Å: 1 {fromCurrency} = {rate:F4} {toCurrency}");
            
            if (fromCurrency != "USD" && toCurrency != "USD")
            {
                double usdAmount = amount / currencies[fromCurrency].RateToUSD;
                Console.WriteLine($"üíµ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USD: ${usdAmount:F2}");
            }
        }

        private void ShowAllCurrencies()
        {
            Console.Clear();
            Console.WriteLine("=== üìã –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –í–ê–õ–Æ–¢–´ ===\n");
            
            Console.WriteLine("–ö–æ–¥  | –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã              | –°–∏–º–≤–æ–ª | –ö—É—Ä—Å –∫ USD");
            Console.WriteLine("-----|------------------------------|--------|----------");
            
            foreach (var currency in currencies.Values)
            {
                Console.WriteLine($"{currency.Code,-4} | {currency.Name,-28} | {currency.Symbol,-6} | {currency.RateToUSD,6:F2}");
            }
            
            Console.WriteLine($"\n–í—Å–µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {currencies.Count} –≤–∞–ª—é—Ç");
        }

        private void ShowExchangeRates()
        {
            Console.Clear();
            Console.WriteLine("=== üìä –ö–£–†–°–´ –í–ê–õ–Æ–¢ –ö –î–û–õ–õ–ê–†–£ –°–®–ê ===\n");
            
            Console.WriteLine("–í–∞–ª—é—Ç–∞ | –ü–æ–∫—É–ø–∫–∞    | –ü—Ä–æ–¥–∞–∂–∞    | –ò–∑–º–µ–Ω–µ–Ω–∏–µ");
            Console.WriteLine("-------|------------|------------|----------");
            
            Random random = new Random();
            
            foreach (var currency in currencies.Values)
            {
                if (currency.Code == "USD") continue;
                
                double buyRate = currency.RateToUSD;
                double sellRate = buyRate * 1.02; // –ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
                double change = (random.NextDouble() - 0.5) * 0.1; // –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ¬±5%
                string changeStr = change >= 0 ? $"+{change:F3}" : $"{change:F3}";
                string changeIcon = change >= 0 ? "üìà" : "üìâ";
                
                Console.WriteLine($"{currency.Code,-6} | {buyRate,10:F4} | {sellRate,10:F4} | {changeIcon} {changeStr}");
            }
            
            Console.WriteLine("\nüí° –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏");
            Console.WriteLine("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏");
        }

        private void QuickConvert()
        {
            Console.Clear();
            Console.WriteLine("=== ‚ö° –ë–´–°–¢–†–´–ô –ö–û–ù–í–ï–†–¢–ï–† ===\n");
            
            Console.WriteLine("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:");
            Console.WriteLine("1. USD ‚Üí RUB");
            Console.WriteLine("2. EUR ‚Üí USD");
            Console.WriteLine("3. RUB ‚Üí USD");
            Console.WriteLine("4. GBP ‚Üí EUR");
            Console.WriteLine("5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è");
            
            Console.Write("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-5): ");
            string choice = Console.ReadLine();
            
            string from = "", to = "";
            
            switch (choice)
            {
                case "1": from = "USD"; to = "RUB"; break;
                case "2": from = "EUR"; to = "USD"; break;
                case "3": from = "RUB"; to = "USD"; break;
                case "4": from = "GBP"; to = "EUR"; break;
                case "5": 
                    ConvertCurrency();
                    return;
                default:
                    Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                    return;
            }
            
            double amount = GetAmount($"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currencies[from].Name}:");
            if (amount < 0) return;
            
            double result = Convert(amount, from, to);
            ShowConversionResult(amount, from, result, to);
        }

        public static void Main(string[] args)
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            Console.InputEncoding = System.Text.Encoding.UTF8;
            
            CurrencyConverter converter = new CurrencyConverter();
            converter.Run();
        }
    }
}
